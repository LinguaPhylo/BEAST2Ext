<project default="build" basedir="." name="outercore">

    <!-- Java 11 -->
    <property name="sourceVersion" value="11"/>
    <property name="targetVersion" value="11"/>

    <!--*******************************************************************-->

    <!-- Ant build fails if the repo dir isn't named beast-outercore -->
    <property name="repoName" value="beast-outercore"/>
    <!-- source code dir separated from test   -->
    <property name="src" location="../${repoName}/src" />
    <!-- source code dir of test   -->
    <property name="lib" location="../${repoName}/lib" />
    <property name="test" location="../${repoName}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="build" location="../${repoName}/build" />
    <property name="dist" location="../${repoName}/dist" />
    <property name="build-test" location="../${repoName}/build-test"/>
    <property name="test-reports" location="../${repoName}/test-reports"/>

    <property name="projName" value="outercore"/>
    <property name="projVersion" value="0.0.1"/>

    <!--*******************************************************************-->

    <path id="outercore-clspath">
        <pathelement path="${classpath}"/>
        <pathelement path="${build}"/>
        <fileset dir="${lib}" includes="*.jar"/>
    </path>

    <!-- Prepare for compilation -->
    <target name="init">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${repoName}." />

        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
    </target>

    <!-- Compile -->
    <target name="compile" depends="init">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${src}"
               destdir="${build}" classpathref="outercore-clspath" includeantruntime="false">
        </javac>
        <echo message="Successfully compiled ${projName}."/>
    </target>

    <!-- Release -->
    <property name="pack" value="${dist}/package"/>

    <target name="dist" depends="compile">
        <mkdir dir="${pack}"/>
        <jar jarfile="${pack}/${projName}.src.jar">
            <fileset dir="${src}"/>
        </jar>

        <jar jarfile="${pack}/${projName}.v${projVersion}.jar">
            <fileset dir="${build}"/>
            <manifest>
                <attribute name="Main-Class" value="beast.app.beastapp.BeastMain"/>
            </manifest>
            <zipgroupfileset dir="${lib}" includes="*.jar"/>
        </jar>

        <echo>** ${projName}.jar created successfuly! **</echo>
    </target>


    <target name="build" depends="clean, compile"/>

    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${repoName}." />

        <mkdir dir="${build-test}"/>
        <mkdir dir="${test-reports}"/>
    </target>

    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test,compile">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${test}" destdir="${build-test}"
               classpathref="outercore-clspath" includeantruntime="false">
        </javac>
        <echo message="Successfully compiled ${projName} tests."/>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile-test">
        <junit printsummary="yes" failureproperty="testFailed">
            <classpath>
                <path refid="outercore-clspath"/>
                <pathelement path="${build-test}"/>
            </classpath>
            <batchtest fork="yes" todir="${test-reports}">
                <fileset dir="${test}">
                    <include name="**/*Test.java"/>
                </fileset>
                <formatter type="plain"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${projName} failed."/>
    </target>

    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <delete dir="${build-test}"/>
        <delete dir="${test-reports}"/>
    </target>

    <target name="travis" depends="clean, compile, test">
        <fail if="testFailed" message="One or more ${projName} tests failed."/>
    </target>

</project>
