<project default="compile" basedir="." name="outercore">

    <!-- Java 11 -->
    <property name="sourceVersion" value="1.8"/>
    <property name="targetVersion" value="1.8"/>

    <!--*******************************************************************-->

    <!-- Ant build fails if the repo dir isn't named beast-outercore -->
    <property name="outercoreName" value="beast-outercore"/>
    <!-- source code dir separated from test   -->
    <property name="outcorSrc" location="../${outercoreName}/src" />
    <!-- source code dir of test   -->
    <property name="outcorLib" location="../${outercoreName}/lib" />
    <property name="outcorTest" location="../${outercoreName}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="outcorBuild" location="../${outercoreName}/build" />
    <property name="outcorDist" location="../${outercoreName}/dist" />
    <property name="outcor-build-test" location="../${outercoreName}/build-test"/>
    <property name="outcor-test-reports" location="../${outercoreName}/test-reports"/>

    <property name="outercoreBrief" value="outercore"/>

    <!--*******************************************************************-->

    <path id="outercore-clspath">
<!--        <pathelement path="${classpath}"/>-->
        <pathelement path="${outcorBuild}"/>
        <fileset dir="${outcorLib}" includes="*.jar"/>
    </path>


    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${outcorBuild}"/>
        <delete dir="${outcorDist}"/>
        <delete dir="${outcor-build-test}"/>
        <delete dir="${outcor-test-reports}"/>
    </target>

    <!-- Prepare for compilation -->
    <target name="init" depends="clean">
        <echo message="Local Java version: ${java.version}, but compile for Java ${targetVersion}."/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${outercoreName}." />

        <mkdir dir="${outcorBuild}"/>
        <mkdir dir="${outcorDist}"/>
    </target>

    <!-- Compile -->
    <target name="compile" depends="init">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${outcorSrc}"
               destdir="${outcorBuild}" classpathref="outercore-clspath" includeantruntime="false">
        </javac>
        <echo message="Successfully compiled ${outercoreBrief}."/>
    </target>

    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${outercoreName}." />

        <mkdir dir="${outcor-build-test}"/>
        <mkdir dir="${outcor-test-reports}"/>
    </target>

    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${outcorTest}" destdir="${outcor-build-test}"
               classpathref="outercore-clspath" includeantruntime="false">
        </javac>
        <echo message="Successfully compiled ${outercoreBrief} tests."/>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile, compile-test">
        <junit printsummary="yes" failureproperty="testFailed">
            <classpath>
                <path refid="outercore-clspath"/>
                <pathelement path="${outcor-build-test}"/>
            </classpath>
            <batchtest fork="yes" todir="${outcor-test-reports}">
                <fileset dir="${outcorTest}">
                    <include name="**/*Test.java"/>
                </fileset>
                <formatter type="plain"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${outercoreBrief} failed."/>
    </target>

    <target name="github-actions" depends="compile, compile-test, test">
        <fail if="testFailed" message="One or more ${outercoreBrief} tests failed."/>
    </target>


    <!-- Release -->
    <property name="pkgDir" location="${outcorDist}/package"/>

    <!-- Create BEAST 2 package, no dist task here -->
    <target name="release" depends="compile">
        <xmlproperty file="version.xml" collapseAttributes="true"/>
        <echo>name=${addon.name}, version=${addon.version}</echo>
        <echo>depends=${addon.depends.on}, atleast=${addon.depends.atleast}</echo>

        <property name="projVersion" value="${addon.version}"/>
        <property name="fullName" value="${outercoreBrief}.v${projVersion}"/>
        <echo>fullName=${fullName}</echo>

        <mkdir dir="${pkgDir}"/>
<!--        <mkdir dir="${pack}/examples"/>-->
<!--        <mkdir dir="${pack}/templates"/>-->
        <!--mkdir dir="${pack}/lib"/-->
<!--        <mkdir dir="${pack}/doc"/>-->

        <jar jarfile="${pkgDir}/${fullName}.src.jar" basedir="${outcorSrc}" />

        <!--mkdir dir="${lib}" />
        <copy todir="${pack}/lib">
            <fileset dir="${lib}" includes="*.jar" />
        </copy-->

        <!--   use as BEAST 2 plugin     -->
        <jar jarfile="${pkgDir}/lib/${fullName}.jar" basedir="${outcorBuild}" includes="**/*.class" />
<!--        <jar jarfile="${pack}/${projName}.v${projVersion}.jar" basedir="${build}">-->
<!--            <manifest>-->
<!--                <attribute name="Main-Class" value="beast.app.beastapp.BeastMain"/>-->
<!--            </manifest>-->
<!--            <zipgroupfileset dir="${lib}" includes="*.jar"/>-->
<!--        </jar>-->

        <copy file="README.md" tofile="${pkgDir}/README" />
        <copy file="LICENSE" tofile="${pkgDir}/LICENSE" />

        <!--        <mkdir dir="${examples}" />-->
<!--        <copy todir="${pack}/examples">-->
<!--            <fileset dir="${examples}" includes="**/*.xml" />-->
<!--            <fileset dir="${examples}" includes="**/*.nex" />-->
<!--        </copy>-->

<!--        <mkdir dir="${templates}" />-->
<!--        <copy todir="${pack}/templates">-->
<!--            <fileset dir="${templates}" includes="*.xml" />-->
<!--        </copy>-->

<!--        <mkdir dir="${doc}" />-->
<!--        <copy todir="${pack}/doc">-->
<!--            <fileset dir="${doc}" includes="*.tex,*.doc,*.lyx,*.txt"/>-->
<!--        </copy>-->

        <copy file="version.xml" todir="${pkgDir}" />

        <zip destfile="${outcorDist}/${fullName}.zip" basedir="${pkgDir}" />

        <delete dir="${pkgDir}"/>

        <echo/>
        <echo/>
        <echo>** Package ${dist}/${fullName}.zip created successfully! **</echo>

    </target>


</project>
